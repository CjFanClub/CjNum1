name: Production Release

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update_config:
    runs-on: ubuntu-latest
    # Job 全体のタイムアウト時間を指定
    timeout-minutes: 5

    steps:
      - name: Set up Git identity
        run: |
          git config --global user.name ${{ secrets.GIT_USER_NAME }}
          git config --global user.email ${{ secrets.GIT_USER_EMAIL }}

      # 開発用ブランチを指定
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: "develop"

      - name: Get the latest commit on release/V2.10
        id: branch_commit
        run: |
          git fetch origin
          BRANCH_COMMIT=$(git rev-parse HEAD)
          echo "BRANCH_COMMIT=${BRANCH_COMMIT}" >> $GITHUB_ENV

      - name: Get latest release tag
        id: get_latest_release_tag
        run: |
           # Get the latest release information using GitHub REST API
           LATEST_RELEASE=$(curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    "https://api.github.com/repos/${{ github.repository }}/releases/latest")

           LATEST_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')

           echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
        shell: bash


      - name: Get the commit of the latest release tag
        id: tag_commit
        run: |
          git fetch --tags
          TAG_COMMIT=$(git rev-parse ${{ env.LATEST_TAG }})
          echo "TAG_COMMIT=${TAG_COMMIT}" >> $GITHUB_ENV

      # - name: Get the latest release tag
      #   id: latest_tag
      #   run: |
      #     LATEST_TAG=$(git describe --tags --abbrev=0)
      #     echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Compare commits
        run: |
          if [ "${{env.BRANCH_COMMIT }}" = "${{ env.TAG_COMMIT }}" ]; then
            echo "has_commits=false" >> $GITHUB_ENV
          else
            echo "has_commits=true" >> $GITHUB_ENV
          fi

      # - name: Check if develop branch has new commits
      #   id: check_commits
      #   run: |
      #     git fetch origin
      #     DIFF=$(git diff --name-only origin/develop..origin/staging)
      #     if [ -z "$DIFF" ]; then
      #       echo "has_commits=false" >> $GITHUB_ENV
      #     else
      #       echo "has_commits=true" >> $GITHUB_ENV
      #     fi

      - name: Create tag
        if: env.has_commits == 'true'
        shell: bash
        run: |
          TAG_VERSION=express_$(date --date "8 days" +%Y%m%d_%H%M%S)
          echo "TAG_VERSION=express_$(date --date "8 days" +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

          git tag $TAG_VERSION -m "Release $TAG_VERSION"
          git push origin $TAG_VERSION

        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: create release and release note
        if: env.has_commits == 'true'

        uses: release-drafter/release-drafter@v5
        with:
          tag: ${{ env.TAG_VERSION }}
          name: ${{ env.TAG_VERSION }}
          publish: false

        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}